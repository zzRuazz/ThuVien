class AjaxProvider {
    static Get(ajaxOptions) {
        if (ajaxOptions === undefined)
            throw "Ajax options is required.";

        ajaxOptions.method = "GET";

        let hasLoading = ajaxOptions.hasLoading;
        if (hasLoading === undefined)
            hasLoading === true;
        ajaxOptions.beforeSend = function () {
            if (hasLoading)
                PageProvider.ShowLoading();
        };

        //ajaxOptions.complete = function () {
        //    if (hasLoading) {
        //        PageProvider.HideLoading();
        //    }
        //};

        return AjaxProvider.Ajax(ajaxOptions);
    }
    static GetSync(ajaxOptions) {
        if (ajaxOptions === undefined)
            throw "Ajax options is required.";

        ajaxOptions.method = "GET";
        ajaxOptions.async = false;
        return AjaxProvider.Ajax(ajaxOptions);
    }

    static Post(ajaxOptions) {
        if (ajaxOptions === undefined)
            throw "Ajax options is required.";

        ajaxOptions.method = "POST";
        return AjaxProvider.Ajax(ajaxOptions);
    }
    static PostSync(ajaxOptions) {
        if (ajaxOptions === undefined)
            throw "Ajax options is required.";

        ajaxOptions.method = "POST";
        ajaxOptions.async = false;
        return AjaxProvider.Ajax(ajaxOptions);
    }

    static PostFormData(ajaxOptions) {
        if (ajaxOptions === undefined)
            throw "Ajax options is required.";

        ajaxOptions.method = "POST";
        ajaxOptions.contentType = false;
        ajaxOptions.processData = false;
        return AjaxProvider.Ajax(ajaxOptions);
    }
    static PostFormDataSync(ajaxOptions) {
        if (ajaxOptions === undefined)
            throw "Ajax options is required.";

        ajaxOptions.method = "POST";
        ajaxOptions.async = false;
        ajaxOptions.contentType = false;
        ajaxOptions.processData = false;
        return AjaxProvider.Ajax(ajaxOptions);
    }

    static Ajax(ajaxOptions) {
        if (ajaxOptions === undefined)
            throw "Ajax options is required.";

        if (ajaxOptions.hasLoading === undefined)
            ajaxOptions.hasLoading = true;

        ajaxOptions.beforeSend = function () {
            if (ajaxOptions.hasLoading)
                PageProvider.ShowLoading();

            let button = ajaxOptions.button;
            if (button !== undefined) {
                PageProvider.LoadButtonElement(button);
            }
        };



        let successFn = ajaxOptions.success;

        //ajaxOptions.success = async function (res) {
        //await successFn(res);
        //if (ajaxOptions.hasLoading)
        //  PageProvider.HideLoading();
        //};
        ajaxOptions.complete = function () {
            if (ajaxOptions.hasLoading)
                PageProvider.HideLoading();

            let button = ajaxOptions.button;
            if (button !== undefined) {
                PageProvider.UnloadButtonElement(button);
            }
        };

        return $.ajax(ajaxOptions);
    }

    static Inits() {
        $(function () {
            $(document).ajaxError(function (event, jqXHR, ajaxSettings, thrownError) {
                if (jqXHR.responseText.includes("A potentially dangerous Request")) {
                    Message.ShowErrorMessage("Dữ liệu chứa các kí tự không hợp lệ");
                } else {
                    if (jqXHR.status === 401) {
                        var d = $.parseJSON(jqXHR.responseText);
                        Message.ShowErrorMessage("Phiên làm việc của bạn đã hết hạn, đăng nhập lại");
                        window.location.href = d.LoginUrl;
                    }
                    else if (jqXHR.status === 403) {
                        Message.ShowErrorMessage("Bạn không có quyền truy cập");
                    }
                    else {
                        Message.ShowErrorMessage("Hệ thống bị lỗi, vui lòng thử lại sau");
                    }
                }
                PageProvider.HideLoading();
            });
            $(document).ajaxComplete(function () {
                FormProvider.BindValidate();
                FormProvider.AppendRequiredToControl();
            });
        });
    }
}
function merge(target, source) {
    mergeValues(target, source)
    return target
}

function IsJsonString(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

function mergeValues(target, source) {
    if (typeof (target) === 'object' && typeof (source) === 'object') {
        return mergeObjects(target, source)
    }
    if (Array.isArray(target) && Array.isArray(source)) {
        return mergeArrays(target, source)
    }
    if (source === undefined) {
        return target
    }
    return source
}

function mergeObjects(target, source) {
    Object.keys(source).forEach((key) => {
        const sourceValue = source[key]
        const targetValue = target[key]
        target[key] = mergeValues(targetValue, sourceValue)
    })

    return target
}

function mergeArrays(target, source) {
    source.forEach((value, index) => {
        target[index] = mergeValues(target[index], value)
    })

    return target
}

function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
}

function clearForm(element) {
    $(element).find("input, textarea").val("");
    $(element).find("select").each((_, element) => {
        element.selectedIndex = 0;
    })
}

function ConvertHalfStringData(str) {
    let leng = str.length;
    let spl = Math.ceil(leng / 2);
    let inc = leng - spl;
    let subStr = str.substr(0, spl);

    for (i = 0; i < inc; i++) {
        subStr += "*";
    }

    return subStr;
}

(function ($) {
    $.fn.dataTable.ext.errMode = 'none';

    $.fn.MainTables = function (options) {
        return DataTableProvider.MainTables($(this), options);
    };

    $(document).on('click', 'input.checkbox-header', function () {
        let checked = $(this).prop('checked');
        let $checkboxRow = $(this).parents('.dataTables_wrapper').first().find('input.checkbox-row');
        $checkboxRow.prop('checked', checked);
    })

    $(document).on('click', 'input.checkbox-row', function () {
        let checked = $(this).prop('checked');
        let $checkboxHeader = $(this).parents('.dataTables_wrapper').first().find('input.checkbox-header').first();
        if (!checked) {
            $checkboxHeader.prop('checked', false);
        } else {
            let $table = $(this).parents('.dataTables_wrapper').first();
            let $checkboxRow = $table.find('input.checkbox-row');
            let $checkboxRowChecked = $table.find('input.checkbox-row:checked');

            if ($checkboxRow.length == $checkboxRowChecked.length) {
                $checkboxHeader.prop('checked', true);
            }
        }
    })
}(jQuery));

class DataTableProvider {
    static CreateTable($control, options) {
        if (options === undefined) {
            options = {};
        }

        let table = $control.DataTable(options);
        let id = $control.attr('id');

        if (options.searching == true) {
            $('#' + id + '_filter input').unbind();
            $('#' + id + '_filter input').bind('keyup', function (e) {
                if (e.keyCode == 13) {
                    table.search(this.value).draw();

                    setTimeout(function () {
                        $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
                    }, 300);
                }
            });

            $('#' + id + '_filter input').bind('blur', function (e) {
                table.search($(this).val());
            });
        }

        $('#' + id + ' tbody').on('dblclick', 'tr', function () {
            var data = table.row(this).data();

            if (options.dblclick != undefined) {
                options.dblclick(data.Id);
            }
        });

        table.on('user-select', function (e, dt, type, cell, originalEvent) {
            if ($(cell.node()).parent().hasClass('selected')) {
                e.preventDefault();
            }
        });

        var curPosition = 0;

        table.on('preDraw', function () {
            curPosition = $control.parent().scrollTop();
        }).on('draw.dt', function () {
            $control.parent().scrollTop(curPosition);
        });

        return table;
    }

    static MainTables($control, options) {

        let defaultOptions = {
            "lengthMenu": [[50, 100, 200, -1], [50, 100, 200, "Tất cả"]],
            "scrollX": true,
            "processing": true,
            "scrollCollapse": true,
            "serverSide": true,
            "searching": false,
            "ordering": false,
            "info": false,
            "paging": true,
            "bFilter": true,
            "select": 'single',
            "language": {
                "sProcessing": "Đang xử lý...",
                "sLengthMenu": "Xem _MENU_ mục",
                "sZeroRecords": "Không tìm thấy dòng nào phù hợp",
                "sInfo": "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                "sInfoEmpty": "Đang xem 0 đến 0 trong tổng số 0 mục",
                "sInfoFiltered": "(được lọc từ _MAX_ mục)",
                "sInfoPostFix": "",
                "sSearch": "Tìm:",
                "sUrl": "",
                "oPaginate": {
                    "sFirst": "Đầu",
                    "sPrevious": "Trước",
                    "sNext": "Tiếp",
                    "sLast": "Cuối"
                },
                "select": {
                    "rows": ""
                }
            },
            "createdRow": function (row, data, dataIndex) {

            },
            "ajax": {
                "type": "POST"
            },
        };

        if (options !== undefined) {
            defaultOptions = { ...defaultOptions, ...options };
        }

        if (defaultOptions.serverSide == true) {
            if (defaultOptions.ajax === undefined) {
                defaultOptions.ajax = {};
            }

            if (defaultOptions.ajax.type === undefined) {
                defaultOptions.ajax.type = "POST";
            }

            if (defaultOptions.ajax.dataType === undefined) {
                defaultOptions.ajax.dataType = "json";
            }

            defaultOptions.ajax.dataFilter = function (res) {
                res = JSON.parse(res);
                let dataObj = {};
                dataObj = res.Data;
                let totalRecords = res.PaginationCount;
                let result = {};
                result.data = dataObj;
                result.recordsFiltered = totalRecords;
                result.recordsTotal = totalRecords;
                return JSON.stringify(result);
            }
        }

        return DataTableProvider.CreateTable($control, defaultOptions);
    }
}
class DateTimeProvider {
    //dd/MM/yyyy(client) | dd/MM/yyyy HH:mm:ss(client) -> yyyy-MM-dd HH:mm:ss(server)
    static ConvertToServerDateTime(strclientDateTime, seperate) {
        if (seperate === undefined)
            seperate = "/";
        let [day, month, year] = strclientDateTime.split(seperate);

        if (strclientDateTime.indexOf(":") !== -1) {
            let yearSplit = year.split(' ');
            year = yearSplit[0];

            let [hour, minute, second] = yearSplit[1].split(':');

            return parseInt(year) + "-" + parseInt(month) + "-" + parseInt(day) + ' '
                + parseInt(hour) + ':' + parseInt(minute) + (Number.isNaN(parseInt(second)) ? '' : (':' + + parseInt(second)));
        }

        return parseInt(year) + "-" + parseInt(month) + "-" + parseInt(day);
    }

    //yyyy-MM-ddTHH:mm:ss.i -> HH:mm:ss dd/MM/yyyy
    static ConvertDBTimeToClientFormat2(strServerDateTime) {
        if (strServerDateTime) {
            let [date, time] = strServerDateTime.split(('T'));
            let [year, month, day] = date.split('-');
            let [hour, minute, second] = time.split(':');
            let hourString = parseInt(hour) >= 10 ? parseInt(hour) : "0" + parseInt(hour);
            let minuteString = parseInt(minute) >= 10 ? parseInt(minute) : "0" + parseInt(minute);
            let secondString = parseInt(second) >= 10 ? parseInt(second) : "0" + parseInt(second);

            return year + '-' + month + '-' + day + ' ' + hourString + ':' + minuteString + (Number.isNaN(parseInt(second)) ? '' : (':' + secondString));
        } else {
            return '';
        }
    }

    //yyyy-MM-ddTHH:mm:ss.i -> HH:mm:ss dd/MM/yyyy
    static ConvertDBTimeToClientFormat(strServerDateTime) {
        if (strServerDateTime) {
            let [date, time] = strServerDateTime.split(('T'));
            let [year, month, day] = date.split('-');
            let [hour, minute, second] = time.split(':');
            let hourString = parseInt(hour) >= 10 ? parseInt(hour) : "0" + parseInt(hour);
            let minuteString = parseInt(minute) >= 10 ? parseInt(minute) : "0" + parseInt(minute);
            let secondString = parseInt(second) >= 10 ? parseInt(second) : "0" + parseInt(second);

            return hourString + ':' + minuteString + (Number.isNaN(parseInt(second)) ? '' : (':' + secondString)) + ' ' + day + "/" + month + "/" + year;
        } else {
            return '';
        }
    }

    //yyyy-MM-ddTHH:mm:ss.i -> dd-MM-yyyy
    static ConvertDBTimeToDateFormatOnly(strServerDateTime) {
        if (strServerDateTime) {
            let [date, time] = strServerDateTime.split(('T'));
            return date;
        } else {
            return '';
        }
    }

    // yyyy-mm-dd => dd/mm/yyyy
    static ConvertToClientFormat(strclientDateTime, seperate) {
        if (seperate === undefined)
            seperate = "/";
        let [year, month, day] = strclientDateTime.split(seperate);

        if (strclientDateTime.indexOf(":") !== -1) {
            let yearSplit = year.split(' ');
            year = yearSplit[0];

            let [hour, minute, second] = yearSplit[1].split(':');

            return parseInt(day) + "/" + parseInt(month) + "/" + parseInt(year) + ' '
                + parseInt(hour) + ':' + parseInt(minute) + (Number.isNaN(parseInt(second)) ? '' : (':' + + parseInt(second)));
        }

        return parseInt(day) + "/" + parseInt(month) + "/" + parseInt(year);
    }

    static ValidateDateTime(strClientDateTime, seperate) {
        strClientDateTime = strClientDateTime.trim();

        if (seperate === undefined)
            seperate = "/";
        let [day, month, year] = strClientDateTime.split(seperate);

        day = parseInt(day);
        if (isNaN(day) || day > 31 || day < 0)
            return false;

        month = parseInt(month);
        if (isNaN(month) || month > 12 || month < 0)
            return false;

        if (month === 2 && day > 29)
            return false;

        if (day === 31 && [2, 4, 6, 9, 11].indexOf(month) > -1)
            return false;

        let yearSplit = year.split(' ');
        year = parseInt(yearSplit[0]);
        if (isNaN(year) || year < 1700 || year < 0)
            return false;

        let time = yearSplit[1];
        if (time === '' || time === null || time === undefined)
            return true;

        if (time.indexOf(":") === -1)
            return false;

        //let [hour, minute, second] = time.split(':');
        let [hour, minute] = time.split(':');
        hour = parseInt(hour);
        if (isNaN(hour) || hour > 23 || hour < 0)
            return false;

        minute = parseInt(minute);
        if (isNaN(minute) || minute > 59 || minute < 0)
            return false;

        //second = parseInt(second);
        //if (isNaN(second) || second > 59 || second < 0)
        //    return false;

        return true;
    }

    // /Date(1538931600000)/ -> dd/mm/yyyy
    static ConvertToClient(strDate, seperate, time) {
        if (strDate != null && strDate.length > 0) {
            let date = new Date(strDate.match(/\d+/).map(Number)[0]);
            let day = date.getDate();
            if (day.toString().length === 1)
                day = "0" + day;
            let month = date.getMonth() + 1;
            if (month.toString().length === 1)
                month = "0" + month;
            let year = date.getFullYear();
            if (seperate === undefined)
                seperate = "/";
            if (time !== undefined) {
                if (time === true) {
                    let hour = date.getHours();
                    if (hour.toString().length == 1)
                        hour = "0" + hour;
                    let minute = date.getMinutes();
                    if (minute.toString().length == 1)
                        minute = "0" + minute;
                    let second = date.getSeconds();
                    if (second.toString().length == 1)
                        second = "0" + second;
                    return day + seperate + month + seperate + year + " " + hour + ":" + minute + ":" + second;
                }
            }
            return day + seperate + month + seperate + year;
        }
    }

    static ConvertToClientDate(strDate) {
        let date = new Date(strDate.match(/\d+/).map(Number)[0]);
        return date;
    }

    static SubDateTime(startDate, endDate) {
        return new Date(endDate.match(/\d+/).map(Number)[0]) - new Date(startDate.match(/\d+/).map(Number)[0]);
    }

    static Inits() {
        $('[data-type="date"].init').each(function () {
            let $control = $(this);
            $control.removeClass("init");
            $control.datepicker({
                autoclose: true,
                format: 'dd/mm/yyyy',
                todayBtn: true
            });
        });
    }
}

$(function () {
    DateTimeProvider.Inits();

});

$(document).ajaxComplete(function () {
    DateTimeProvider.Inits();
});
class FormProvider {
    //generate JS Object from controls
    static BindToFormData($form) {
        let formData = new FormData();
        $.each($form.find("[name]"), function (index, control) {
            let $control = $(control);
            let name = $control.attr("name");
            let value = $control.val();

            //HTML
            if ($control.attr("data-plugin") === "summernote") {
                formData.append(name, $control.summernote('code'));
            }
            else if ($control.attr("data-plugin") === "ckeditor") {
                formData.append(name, CKEDITOR.instances[name].getData());
            }
            //DATE AND DATETIME
            else if ($control.attr("data-type") === "date" || $control.attr("data-type") === "datetime") {
                if (value !== '' && value !== null && value !== undefined)
                    formData.append(name, DateTimeProvider.ConvertToServerDateTime(value));
                else {
                    //formData.append(name, null);
                }
            }
            //NUMBER
            else if ($control.attr("data-input-type") === "number") {
                if (value !== '' && value !== null && value !== undefined) {
                    formData.append(name, value.replace(/\,/g, ""));
                } else {
                    formData.append(name, value);
                }
            }
            //CHECKBOX
            else if ($control.attr("type") === 'checkbox') {
                formData.append(name, $control.prop('checked'));
            }
            //FILE(IMAGE AND FILE)
            else if ($control.attr("data-file") === "1") {
                //let files = $control[0].files;
                let myDropzone = Dropzone.forElement("#" + name);
                let files = myDropzone.files;
                if (files.length > 0 && files[0] !== undefined) {
                    formData.append(name + ".File", files[0]);
                }
            }
            //FILES(IMAGES AND FILES)
            else if ($control.attr("data-file") === "2") {
                let myDropzone = Dropzone.forElement("#" + name);
                let files = myDropzone.files;
                if (files.length > 0) {
                    for (var i = 0; i < files.length; i++) {
                        formData.append(name + "[" + i + "].File", files[i]);
                    }
                }
            }
            //TEXTBOX, SELECT OR MULTIPLE SELECT
            else {
                if ($control.is("select") && $control.attr("multiple") === "multiple") {
                    $.each(value, function (index, valueItem) {
                        formData.append(name + "[" + index + "]", valueItem);
                    });
                } else {
                    formData.append(name, value);
                }
            }
        });

        return formData;
    }

    //generate FormData from controls
    static BindToModel($form) {
        let result = {};
        $.each($form.find("[name]"), function (index, control) {
            let $control = $(control);
            let name = $control.attr("name");
            let value = $control.val();
            //HTML
            if ($control.attr("data-plugin") === "summernote") {
                result[name] = $control.summernote().code();
            }
            else if ($control.attr("data-plugin") === "ckeditor") {
                result[name] = CKEDITOR.instances[name].getData();;
            }
            //DATE AND DATETIME
            else if ($control.attr("data-type") === "date" || $control.attr("data-type") === "datetime") {
                if (value !== '' && value !== null && value !== undefined)
                    result[name] = DateTimeProvider.ConvertToServerDateTime(value);
                else {
                    result[name] = null;
                }
            }
            //NUMBER
            else if ($control.attr("data-input-type") === "number") {
                if (value !== '' && value !== null && value !== undefined) {
                    result[name] = value.replace(/\,/g, "");
                } else {
                    result[name] = value;
                }
            }
            //CHECKBOX
            else if ($control.attr("type") === 'checkbox') {
                result[name] = $control.prop('checked');
            }
            //TEXTBOX, SELECT OR MULTIPLE SELECT
            else {
                result[name] = value;
            }
        });

        return result;
    }

    //bind value from model to HTML controls
    static bindToForm($form, model) {
        if (model === undefined || model === null)
            model = {};
        $.each($form.find("[name]"), function (index, control) {
            let $control = $(control);
            let name = $control.attr("name");

            let value = model[name];

            if ($control.attr("data-plugin") === "summernote") {
                $control.summernote('code', value);
            } else if ($control.is("select") && $control.attr("multiple")) {
                let $hiddenControlFor = $control.prev("input[type='hidden']");
                if ($hiddenControlFor.length > 0) {
                    let value = JSON.parse($hiddenControlFor.first().val());
                    $control.val(value);
                }
                $control.change();
            } else {
                $control.val(value);
            }
        });
    }

    static BindValidate() {
        var $form = $("form");
        if ($form.length > 0) {
            $form.unbind();
            $form.data("validator", null);

            $.validator.unobtrusive.parse(document);
            // Re add validation with changes
            let unobtrusiveValidation = $form.data("unobtrusiveValidation");
            if (unobtrusiveValidation !== undefined) {
                $form.validate(unobtrusiveValidation.options);
            }
        }
    }

    static CheckBox(name, text, value = "", htmlAttributes = "") {
        return `<label class="rememberme mt-checkbox mt-checkbox-outline">
                    <input class="icheck" type="checkbox" name="${name}" data-value="${value}" ${htmlAttributes}> ${text}
                    <span></span>
                </label>`;
    }

    //generate options in select HTML controls
    static GenerateSelectHTML($select, data, bindValue = false, replace = true, emptyText, disabledEmptyText = true) {
        let optionContent = "";
        if (emptyText !== undefined && emptyText !== "") {
            if (disabledEmptyText) {
                optionContent = "<option value='' disabled='disabled'>" + emptyText + "</option>";
            } else {
                optionContent = "<option value=''>" + emptyText + "</option>";
            }
        }
        $.each(data, function (index, dataItem) {
            optionContent += `<option value='${dataItem.Value}'>${dataItem.Text}</option>`;
        });
        if (replace) {
            $select.html(optionContent);
        } else {
            $select.append(optionContent);
        }

        if (bindValue) {
            FormProvider.BindSelectValue($select);
        }
    }

    static GenerateFormSelectHTML($form) {
        return new Promise(function (resolve, reject) {
            $form.find("a[data-selector='cms-select-refresh']").click();
            resolve();
        });
    }

    static BindMultipleSelectValue($select) {
        $select.val(JSON.parse($select.prev('input').first().val()));
    }

    static BindSelectValue($select) {
        $select.val($select.prev('input').first().val());
    }

    static GetTextareCaret(el) {
        if (el.selectionStart) {
            return el.selectionStart;
        } else if (document.selection) {
            el.focus();
            var r = document.selection.createRange();
            if (r === null) {
                return 0;
            }
            var re = el.createTextRange(), rc = re.duplicate();
            re.moveToBookmark(r.getBookmark());
            rc.setEndPoint('EndToStart', re);
            return rc.text.length;
        }
        return 0;
    }

    static Inits() {
        $('body').on("submit", "form", function () {
            return false;
        });

        //Submit form when press enter in input
        $('body').on('keyup', '[data-control="1"]:not(textarea)', function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                let $form = $(this).parents('form');
                if ($form.length > 0) {
                    let $submitButton = $form.first().find('[data-submit="1"]');
                    if ($submitButton.length) {
                        $submitButton.first().click();
                    }
                }
            }
        });

        //Shift Enter and Enter event in textarea
        $('body').on('keyup', 'textarea[data-control="1"]:not(.note-codable):not([data-plugin="summernote"])', function (event) {
            if (event.keyCode === 13) {
                var content = this.value;
                var caret = FormProvider.GetTextareCaret(this);
                if (event.shiftKey) {
                    this.value = content.substring(0, caret - 1) + "\n" + content.substring(caret, content.length);
                    event.stopPropagation();
                } else {
                    this.value = content.substring(0, caret - 1) + content.substring(caret, content.length);
                    let $form = $(this).parents('form');
                    if ($form.length > 0) {
                        let $submitButton = $form.first().find('button[data-submit="1"]');
                        if ($submitButton.length) {
                            $submitButton.first().click();
                        }
                    }
                }
            }
        });

        //Refresh select control when click refresh button
        $('body').on('click', "a[data-selector='cms-select-refresh']", function () {
            let $this = $(this);
            let $form = $this.parents("form").first();
            let $select = $form.find('#' + $this.prev('label').attr("for"));
            if ($select !== undefined) {
                AjaxProvider.Get({
                    url: $this.attr("data-url"),
                    success: function (response) {
                        if (response.status === 200) {
                            let selectValue = $select.val();
                            FormProvider.GenerateSelectHTML($select, response.data);

                            let $input = $select.prev("input[type='hidden']");
                            if (selectValue === null || selectValue === "" || selectValue === undefined)
                                selectValue = $input.val();
                            else {
                                $input.val(selectValue);
                            }

                            if (selectValue !== null && selectValue !== "" && selectValue !== undefined) {
                                if ($select.attr("multiple") === "multiple") {
                                    FormProvider.BindMultipleSelectValue($select);
                                } else {
                                    FormProvider.BindSelectValue($select);
                                }

                                if ($select.find('option[value="' + selectValue + '"]').length > 0) {
                                    $select.val(selectValue);
                                } else {
                                    $select.val($($select.find('option')[0]).val());
                                }
                                $select.change();
                            }
                        }
                    }
                });
            }
        });

        //Validate control when input
        //$('body').on('keyup', '[data-control="1"]:not([data-plugin="summernote"])', function () {
        //    FormProvider.ValidateControl($(this));
        //});

        $('body').on('input change keyup focusout', '[data-control="1"]:not([data-plugin="summernote"])', function () {
            FormProvider.ValidateControl($(this));
        });

        ////Validate control when focusout
        //$('body').on('focusout', '[data-control="1"]:not([data-plugin="summernote"])', function () {
        //    FormProvider.ValidateControl($(this));
        //});
        FormProvider.BindValidate();
        FormProvider.AppendRequiredToControl();
    }

    static ValidateControl($control) {
        if ($control.attr('data-file') || $control.valid()) {
            var $validatingControl = $control;

            var controlValue = $validatingControl.val();
            let controlName = $validatingControl.attr("name");

            let labelFor = $control.parents("form").first().find("label[for='" + controlName + "']");

            let errorMessages = [];
            var patt = new RegExp("<\/?[A-Za-z]+>?");
            if (patt.test(controlValue)) {
                errorMessages.push('Dữ liệu chứa kí tự không hợp lệ');
            }
            //Date and DateTime
            let dateValidate = $validatingControl.attr('data-type');
            if (dateValidate === "date" || dateValidate === "datetime") {
                if (controlValue !== '' && controlValue !== null) {
                    //Validate datetime format
                    if (!DateTimeProvider.ValidateDateTime(controlValue)) {
                        errorMessages.push('Định dạng không hợp lệ');
                    }
                }
            }

            //file dropzone
            let fileValidate = $validatingControl.attr('data-file');
            if (fileValidate) {
                let required = $validatingControl.attr('data-val-required');
                if (required) {
                    if ($validatingControl.find('.dropzone-items').first().children().length == 0) {
                        errorMessages.push(required);
                    }
                }
            }
            let $errorMessageContainer = $validatingControl.parents(".form-group").first().find(".field-validation-valid[data-valmsg-for='" + controlName + "'], .field-validation-error").first();
            if (errorMessages.length > 0) {
                var message = errorMessages.join("<br />");
                $errorMessageContainer.html(message);
                $errorMessageContainer.addClass("field-validation-error");
                return false;
            }
            else {
                $errorMessageContainer.html("");
                $errorMessageContainer.removeClass("field-validation-error");
                return true;
            }
        }
        return false;
    }

    static Validate($form) {
        var valid = true;
        if ($form.valid()) {

        } else {
            $form.find('.input-validation-error:visible').first().focus();
            valid = false;
        }

        var validatingControls = $form.find('[data-file]');
        if (validatingControls.length > 0) {
            $.each(validatingControls, function (index, validatingControl) {
                if (!FormProvider.ValidateControl($(validatingControl))) {
                    valid = false;
                }
            });
        }
        return valid;
    }

    static AppendRequiredToControl() {
        var controls = $('[data-val="true"]:not(.added-required-simple)');
        $.each(controls, function (index, control) {
            let $control = $(control);
            let dataValRequiredAttribute = $control.attr("data-val-required");
            if (dataValRequiredAttribute !== undefined && dataValRequiredAttribute !== "" && dataValRequiredAttribute !== null) {
                controls.parents("form").first().find('label[for="' + $control.attr("name") + '"]').append("<span style='color: red;margin-left: 2px;'>*</span>");
            }
            $control.addClass("added-required-simple");
        });
    }

    static CreateModal(id, html) {
        if ($('#' + id).length)
            $('#' + id).remove();
        $("body").append(html);
        let $modal = $('#' + id);
        return $modal;
    }

    static CreateSlug(str) {
        str = str.toLowerCase();
        str = str.replace(/(à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ)/g, 'a');
        str = str.replace(/(è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ)/g, 'e');
        str = str.replace(/(ì|í|ị|ỉ|ĩ)/g, 'i');
        str = str.replace(/(ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ)/g, 'o');
        str = str.replace(/(ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ)/g, 'u');
        str = str.replace(/(ỳ|ý|ỵ|ỷ|ỹ)/g, 'y');
        str = str.replace(/(đ)/g, 'd');
        str = str.replace(/([^0-9a-z-\s])/g, '');
        str = str.replace(/(\s+)/g, '-');
        str = str.replace(/-+/g, '-');
        str = str.replace(/^-+/g, '');
        str = str.replace(/-+$/g, '');
        return str;
    };

    static GetCheckedRowTable($table, showMessage = true) {
        let $checkboxRows = $table.find('input.checkbox-row');
        let result = [];
        $.each($checkboxRows, function (i, checkbox) {
            if ($(checkbox).prop('checked')) {
                result.push($(checkbox).val());
            }
        })

        if (result.length == 0 && showMessage) {
            Message.ShowErrorMessage("Không có dòng nào được chọn");
        }
        return result;
    }
}

$(function () {
    //$.validator.setDefaults({ ignore: ":hidden:not(#summernote),.note-editable.panel-body" });
    $.validator.setDefaults({ ignore: ".note-editor *" });
    FormProvider.Inits();
});
//toastr.options.closeButton = true;
//toastr.options.closeButton = true;
//toastr.options.timeOut = 5000;
//class Message {
//    static ShowErrorMessage(message) {
//        Message.ShowToastrMessage(message, 'error');
//    }

//    static ShowInfoMessage(message) {
//        Message.ShowToastrMessage(message, 'info');
//    }

//    static ShowSuccessMessage(message) {
//        Message.ShowToastrMessage(message, 'success');
//    }

//    static ShowQuestionMessage(message) {
//        Message.ShowToastrMessage(message, 'question');
//    }

//    static ShowWarningMessage(message) {
//        Message.ShowToastrMessage(message, 'warning');
//    }

//    static ShowToastrMessage(message, type) {
//        if (type === 'error') {
//            toastr.error(message);
//        } else if (type === 'success') {
//            toastr.success(message);
//        } else if (type === 'warning') {
//            toastr.warning(message);
//        } else if (type === 'info') {
//            toastr.info(message);
//        }
//    }

//    static ShowConfirmMessage(confirmOptions) {
//        bootbox.dialog({
//            message: confirmOptions.message,
//            title: confirmOptions.title,
//            buttons: {
//                success: {
//                    label: "Yes",
//                    className: "btn-primary green-meadow",
//                    callback: function () {
//                        let yesCallback = confirmOptions.yes;
//                        if (yesCallback !== undefined)
//                            yesCallback();
//                    }
//                },
//                danger: {
//                    label: "No",
//                    className: "btn-outline dark",
//                    callback: function () {
//                        let noCallback = confirmOptions.no;
//                        if (noCallback !== undefined)
//                            noCallback();
//                    }
//                }
//            }
//        });
//    }

//    static ShowDeleteConfirmMessage(confirmOptions) {
//        Swal.fire({
//            title: confirmOptions.message,
//            text: confirmOptions.title,
//            icon: "question",
//            showCancelButton: true,
//            confirmButtonText: "Yes",
//            cancelButtonText: "No",
//            customClass: {
//                confirmButton: "btn btn-danger px-7",
//                cancelButton: "btn btn-secondary px-7"
//            }
//        }).then(function (result) {
//            if (result.value) {
//                let yesCallback = confirmOptions.yes;
//                if (yesCallback !== undefined)
//                    yesCallback();
//            } else if (result.dismiss === "cancel") {
//                let noCallback = confirmOptions.no;
//                if (noCallback !== undefined)
//                    noCallback();
//            }
//        });
//    }
//}
class NumberProvider {
    static GetDisplayNumber(value) {
        if (!value && value !== 0) return "";
        return value.toString().replace(/\,/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    static GetIntegerNumberFromInput(input) {
        var $this = $(input);
        return $this.val($this.val().replace(/[^0-9]+$/g, ''));
    }

    static GetDoubleNumberFromInput(input) {
        var $this = $(input);
        var newValue = $this.val().replace(/[^0-9\.]+$/g, '');

        var dotCount = 0;
        var result = "";
        for (var index = 0; index < newValue.length; index++) {
            var valueItem = newValue[index];
            if (valueItem === '.') {
                dotCount++;
                if (dotCount > 1) {
                    continue;
                }
            }
            result += newValue[index];
        }

        $this.val(result);
    }

    static Inits() {
        $('body').on('keyup', '[data-control="1"][data-input-type="number"][data-type="double"]', function () {
            let $input = $(this);
            NumberProvider.GetDoubleNumberFromInput(this);
            $input.val(NumberProvider.GetDisplayNumber($input.val()));
        });

        $('body').on('keyup', '[data-control="1"][data-input-type="normal-number"]', function (evt) {
            NumberProvider.GetIntegerNumberFromInput(this);
        });

        $('body').on('keyup', '[data-control="1"][data-input-type="number"][data-type="integer"]', function () {
            let $input = $(this);
            NumberProvider.GetIntegerNumberFromInput(this);
            $input.val(NumberProvider.GetDisplayNumber($input.val()));
        });
    }
}

$(function () {
    NumberProvider.Inits();
});
class PageProvider {
    static CopyToClipboard(element) {
        element.select();
        document.execCommand("copy");
    }

    static CopyTextToClipboard(text) {
        if (!navigator.clipboard) {
            fallbackCopyTextToClipboard(text);
            return true;
        }
        navigator.clipboard.writeText(text).then(function () {
            return true;
        }, function (err) {
            return false;
        });
    }

    static FallbackCopyTextToClipboard(text) {
        var textArea = document.createElement("textarea");
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();

        var successful;
        try {
            successful = document.execCommand('copy');
        } catch (err) {
            console.error('Fallback: Oops, unable to copy', err);
        }

        document.body.removeChild(textArea);
        return successful;
    }

    //LOADING
    static ShowLoading() {
        let $loadingContainer = $("[data-loading='1']");
        if ($loadingContainer.length === 0) {
            $("body").append("<div class='loading-overlay' data-loading='1'><span><i class='fa fa-spinner fa-spin'></i></span></div>");
            $("[data-loading='1']").show();
        } else {
            $loadingContainer.show();
        }
    }

    static HideLoading() {
        $("[data-loading='1']").remove();
    }

    static LoadButtonElement(button) {
        let $button = $(button);
        if ($button.length > 0) {
            $button.prepend(`<span class="spinner"><i class='fa fa-spinner fa-spin'></i></span> `);
            $button.attr('disabled', 'disabled');
        }
    }

    static PerformClick(element) {
        if (element && document.createEvent) {
            var evt = document.createEvent("MouseEvents");
            evt.initEvent("click", true, false);
            element.dispatchEvent(evt);
        }
    }

    static UnloadButtonElement(button) {
        let $button = $(button);
        if ($button.length > 0) {
            $button.find('span.spinner').remove();
            $button.removeAttr('disabled');
        }
    }

    //static PushState() {
    //    let title = $(document).find('title').html();
    //    let queryString = "";
    //    history.pushState({}, title, location.pathname + )
    //}
    //END LOADING

    static GetQueryString(key) {
        return new URLSearchParams(window.location.search).get(key);
    }
}

$(function () {
    AjaxProvider.Inits();

    //Remove date validation in mvc
    $.validator.methods.date = function (value, element) {
        return true;
    };
    $.validator.methods.number = function (value, element) {
        return true;
    };

    $('.modal').on('shown.bs.modal', function () {
        let $modal = $(this);
        let $controls = $modal.find('[data-control]:visible');
        if ($controls.length > 0) {
            $controls.first().focus();
        }
    });

    $(document).on('shown.bs.modal', '.modal', function () {
        $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
    });

    $(document).on('hidden.bs.modal', '.modal', function () {
        //$('.modal:visible').length && $(document.body).addClass('modal-open');

        //if ($('.modal:visible').length == 0)
        //    $('body').css({ 'overflow-y': 'auto' });

        //$($.fn.dataTable.tables(true)).DataTable().columns.adjust();
    });

    $(document).on('shown.bs.tab', '[data-toggle="tab"]', function () {
        var $a = $(this);
        let id = $a.attr('href');
        $.each($(id).find('table'), function (i, table) {
            if ($.fn.DataTable.isDataTable($(table))) {
                $(table).DataTable().columns.adjust();
            }
        })
    });

});
class Select2Provider {
    static Inits() {
        var $controls = $('[data-plugin="select2"].init');
        if ($controls.length > 0) {
            $.each($controls, function (index, control) {
                let $control = $(control);
                $control.select2();
                $control.removeClass('init');
            });
        }
    }
}

$(function () {
    Select2Provider.Inits();
});

$(document).ajaxComplete(function () {
    Select2Provider.Inits();
});